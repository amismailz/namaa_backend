{
    "openapi": "3.0.0",
    "info": {
        "title": "Insta Car API",
        "version": "1.0.0",
        "description": "API documentation of InstaCar in the system."
    },
    "paths": {
        "/api/v1/": {
            "get": {
                "summary": "Home page",
                "responses": {
                    "200": {
                        "description": "Welcome to InstaCar API"
                    }
                }
            }
        },
        "/api/v1/home-banners": {
            "get": {
                "summary": "List all home banners",
                "tags": ["Home Banners"],
                "responses": {
                    "200": {
                        "description": "A list of home banners",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HomeBanner"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/home-banners/{id}": {
            "get": {
                "summary": "Get a specific home banner",
                "tags": ["Home Banners"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A home banner",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HomeBanner"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/brands": {
            "get": {
                "summary": "List all brands",
                "tags": ["Brands"],
                "responses": {
                    "200": {
                        "description": "A list of brands",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Brand"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "summary": "Create a new brand",
                "tags": ["Brands"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBrandRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/brands/{id}": {
            "get": {
                "summary": "Get a specific brand",
                "tags": ["Brands"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The ID of the brand to retrieve"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Brand not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "summary": "Update or delete a brand",
                "tags": ["Brands"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The ID of the brand to update or delete"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "_method": {
                                        "type": "string",
                                        "enum": ["PUT", "DELETE"],
                                        "description": "HTTP method to simulate. Use 'PUT' to update and 'DELETE' to delete."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the brand (required for 'PUT')."
                                    }
                                },
                                "required": ["_method"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Brand"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Brand not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/cars": {
            "get": {
                "summary": "Get all cars",
                "tags": ["Cars"],
                "responses": {
                    "200": {
                        "description": "A list of cars",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Car"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new car",
                "tags": ["Cars"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Car"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Car created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/cars/{id}": {
            "get": {
                "summary": "Get a car by ID",
                "tags": ["Cars"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single car",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Car not found"
                    }
                }
            },
            "post": {
                "summary": "Handle update or delete car",
                "tags": ["Cars"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "_method": {
                                        "type": "string",
                                        "enum": ["PUT", "DELETE"],
                                        "description": "HTTP method to simulate. Use 'PUT' to update and 'DELETE' to delete."
                                    },
                                    "$ref": "#/components/schemas/Car",
                                    "data": {
                                        "type": "object",
                                        "$ref": "#/components/schemas/Car",
                                        "description": "Car data for updates (required if _method is 'PUT')."
                                    }
                                },
                                "required": ["_method"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Car updated successfully (for PUT) or deleted (for DELETE)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Car not found"
                    },
                    "204": {
                        "description": "Car deleted successfully"
                    }
                }
            }
        },
        "/car-models": {
            "get": {
                "summary": "Get all car models",
                "operationId": "getAllCarModels",
                "tags": ["Car Models"],
                "responses": {
                    "200": {
                        "description": "A list of car models",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CarModel"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new car model",
                "operationId": "createCarModel",
                "tags": ["Car Models"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCarModelRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Car model created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CarModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/car-models/{id}": {
            "get": {
                "summary": "Get a specific car model by ID",
                "operationId": "getCarModelById",
                "tags": ["Car Models"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "The ID of the car model",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single car model",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CarModel"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Update or delete a car model",
                "operationId": "CarModelSingleOperation",
                "tags": ["Car Models"],
                "parameters": [
                    {
                        "_method": {
                            "type": "string",
                            "enum": ["PUT", "DELETE"],
                            "description": "HTTP method to simulate. Use 'PUT' to update and 'DELETE' to delete."
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "The ID of the car model",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCarModelRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Car model updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CarModel"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "HomeBanner": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "title_one": {
                        "type": "string",
                        "example": "Home Banner 1"
                    },
                    "title_two": {
                        "type": "string",
                        "example": "Home Banner 2"
                    },
                    "description": {
                        "type": "string",
                        "example": "Description of the banner"
                    },
                    "image": {
                        "type": "string",
                        "example": "https://example.com/banner1.jpg"
                    }
                }
            },
            "CarModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "brand_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "name": {
                        "type": "string",
                        "example": "Model S"
                    }
                }
            },
            "CreateCarModelRequest": {
                "type": "object",
                "properties": {
                    "brand_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "name": {
                        "type": "string",
                        "example": "Model X"
                    },
                    "model_number": {
                        "type": "string",
                        "example": "TX-2024"
                    }
                },
                "required": ["brand_id", "name"]
            },
            "UpdateCarModelRequest": {
                "type": "object",
                "properties": {
                    "brand_id": {
                        "type": "integer",
                        "example": 3
                    },
                    "name": {
                        "type": "string",
                        "example": "Model Y"
                    },
                    "model_number": {
                        "type": "string",
                        "example": "TY-2024"
                    }
                },
                "required": ["name", "model_number"]
            },
            "Brand": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "example": "Toyota"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "CreateBrandRequest": {
                "type": "object",
                "required": ["name"],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Toyota"
                    }
                }
            },
            "Car": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "brand_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "car_model_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "status": {
                        "type": "string",
                        "example": "new"
                    },
                    "purchase_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-01-01"
                    },
                    "plate_number": {
                        "type": "string",
                        "example": "ABC1234"
                    },
                    "purchase_classification": {
                        "type": "string",
                        "example": "Cash"
                    },
                    "maintenance_cost_expectation": {
                        "type": "number",
                        "format": "float",
                        "example": 1500.0
                    },
                    "car_source": {
                        "type": "string",
                        "example": "Auction"
                    },
                    "clearance_status": {
                        "type": "string",
                        "example": "Cleared"
                    },
                    "cash_purchase": {
                        "type": "number",
                        "format": "float",
                        "example": 20000.0
                    },
                    "maintenance_parts": {
                        "type": "number",
                        "format": "float",
                        "example": 500.0
                    },
                    "polishing": {
                        "type": "number",
                        "format": "float",
                        "example": 200.0
                    },
                    "periodic_check": {
                        "type": "number",
                        "format": "float",
                        "example": 100.0
                    },
                    "registration": {
                        "type": "number",
                        "format": "float",
                        "example": 300.0
                    },
                    "transport": {
                        "type": "number",
                        "format": "float",
                        "example": 150.0
                    },
                    "commission_owner": {
                        "type": "number",
                        "format": "float",
                        "example": 100.0
                    },
                    "commission": {
                        "type": "number",
                        "format": "float",
                        "example": 200.0
                    },
                    "cost_correction": {
                        "type": "number",
                        "format": "float",
                        "example": 50.0
                    },
                    "insurance_value": {
                        "type": "number",
                        "format": "float",
                        "example": 1500.0
                    },
                    "tracking_number": {
                        "type": "integer",
                        "example": 123456
                    },
                    "owner": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "username": {
                        "type": "string",
                        "example": "johndoe"
                    },
                    "sale_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-06-15"
                    },
                    "sale_insurance": {
                        "type": "number",
                        "format": "float",
                        "example": 1200.0
                    },
                    "delegation": {
                        "type": "number",
                        "format": "float",
                        "example": 300.0
                    },
                    "advance_payment": {
                        "type": "number",
                        "format": "float",
                        "example": 5000.0
                    },
                    "installment_value": {
                        "type": "number",
                        "format": "float",
                        "example": 1000.0
                    },
                    "installments_count": {
                        "type": "integer",
                        "example": 12
                    },
                    "installment_day_in_month": {
                        "type": "integer",
                        "example": 15
                    },
                    "extension": {
                        "type": "string",
                        "example": "6 months"
                    },
                    "replacement": {
                        "type": "string",
                        "example": "Engine"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Car is in good condition."
                    },
                    "insurance_refund": {
                        "type": "number",
                        "format": "float",
                        "example": 300.0
                    },
                    "accident_fine": {
                        "type": "number",
                        "format": "float",
                        "example": 500.0
                    },
                    "submit_claim": {
                        "type": "boolean",
                        "example": true
                    },
                    "accident_compensation": {
                        "type": "number",
                        "format": "float",
                        "example": 2000.0
                    },
                    "win_refund_form": {
                        "type": "string",
                        "example": "Form123"
                    },
                    "win_insurance_refund": {
                        "type": "number",
                        "format": "float",
                        "example": 500.0
                    },
                    "final_insurance_and_transportation": {
                        "type": "number",
                        "format": "float",
                        "example": 2500.0
                    },
                    "insurance_end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-06-30"
                    },
                    "client_insurance_end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2025-06-30"
                    },
                    "months_count": {
                        "type": "integer",
                        "example": 24
                    }
                },
                "required": [
                    "brand_id",
                    "car_model_id",
                    "status",
                    "purchase_date",
                    "plate_number"
                ]
            }
        }
    }
}
